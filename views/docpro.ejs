<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">

<!-- jQuery library -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

<!-- Latest compiled JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script> 
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
* {box-sizing: border-box}
body {font-family: "Lato", sans-serif;}
* {
    box-sizing: border-box;
}

div.example input[type=text] {
    padding: 10px;
    font-size: 17px;
    border: 1px solid grey;
    float: left;
    width: 80%;
    background: #f1f1f1;
}

div.example button {
    float: left;
    width: 20%;
    padding: 10px;
    background: #2196F3;
    color: white;
    font-size: 17px;
    border: 1px solid grey;
    border-left: none;
    cursor: pointer;
}

div.example button:hover {
    background: #0b7dda;
}

div.example::after {
    content: "";
    clear: both;
    display: table;
}
/* Style the tab */
.tab {
    float: left;
    border: 1px solid #ccc;
    background-color: #f1f1f1;
    width: 18%;
    height: 300px;
}

/* Style the buttons inside the tab */
.tab button {
    display: block;
    background-color: inherit;
    color: black;
    padding: 22px 16px;
    width: 100%;
    border: none;
    outline: none;
    text-align: left;
    cursor: pointer;
    font-size: 17px;
}

/* Change background color of buttons on hover */
.tab button:hover {
    background-color: #ddd;
}

/* Create an active/current "tab button" class */
.tab button.active {
    background-color: #ccc;
}

/* Style the tab content */
.tabcontent {
    float: left;
    padding: 0px 12px;
    border: 1px solid #ccc;
    width: 80%;
   
    height: 500px;
    display: none;
}

/* Clear floats after the tab */
.clearfix::after {
    content: "";
    clear: both;
    display: table;
}
.reveal-if-active {
  opacity: 0;
  max-height: 0;
  overflow: hidden;
}
input[type="radio"]:checked ~ .reveal-if-active,
input[type="checkbox"]:checked ~ .reveal-if-active {
  opacity: 1;
  max-height: 100px; /* little bit of a magic number :( */
  overflow: visible;
}
.reveal-if-active {
  opacity: 0;
  max-height: 0;
  overflow: hidden;
  transform: scale(0.8);
  transition: 0.5s;
  input[type="radio"]:checked ~ &,
  input[type="checkbox"]:checked ~ & {
    opacity: 1;
    max-height: 100px;
    overflow: visible;
    padding: 10px 20px;
    transform: scale(1);
  }
}
.autocomplete {
  /*the container must be positioned relative:*/
  position: relative;
  display: inline-block;
}

input {
  border: 1px solid transparent;
  background-color: #f1f1f1;
  padding: 10px;
  font-size: 16px;
}

input[type=text] {
  background-color: #f1f1f1;
  width: 100%;
}

input[type=submit] {
  background-color: DodgerBlue;
  color: #fff;
  cursor: pointer;
}

.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}

.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}

.autocomplete-items div:hover {
  /*when hovering an item:*/
  background-color: #e9e9e9; 
}

.autocomplete-active {
  /*when navigating through the items using the arrow keys:*/
  background-color: DodgerBlue !important; 
  color: #ffffff; 
}
</style>
</head>
<body>
<h1>INFINITY HOSPITAL</h1>


<div class="tab">
  <button class="tablinks" onmouseover="openCity(event, 'Profile')">Profile</button>
  <button class="tablinks" onmouseover="openCity(event, 'History')">History</button>
  <button class="tablinks" onmouseover="openCity(event, 'Dia')">Diagnosis</button>
  <button class="tablinks" onmouseover="openCity(event, 'Med')">Medicines</button>
</div>

<div id="Profile" class="tabcontent">
  <h4>Name:<%= p.name %></h4>
  <h4>Gender:<%= p.gender %></h4>
  <h4>Age:<%= p.age %></h4>
  <h4>Weight:<%= p.weight %></h4>
  <h4>Height:<%= p.height %></h4>
  

  </div>

<div id="History" class="tabcontent">
<% for(var i=0;i<s.length ;i++){ %>

  <h3>Consultation <%= i+1 %>:</h3><br>
  Date of Consultation: <%= s[i].date_c %> <br>
  Doctor Name: <%= s[i].name %> <br>
  Department:<%= s[i].dept_name %> <br>
  <% } %>

 <h3> Problems Diagnosed </h3><br>
  <% for(var j=0;j< t.length ;j++){ %>
  Date of Consultation: <%= t[j].date_c %> <br>
  Problem Diagnosed: <%= t[j].problem %> <br>
  <% } %> 
  
  <h3> Tests Conducted </h3><br>
   <% if(x.length >0){ %> 
    <% for(var j=0;j<x.length ;j++){ %>
    Date of Consultation: <%= x[j].date_c %> <br>
  Test Name:<%= x[j].test_name %> <br>
   <% } %>
   <% } %>
   
  <h3> Surgeries </h3>
  <% if(w.length >0 ){ %>
  <% for(var j=0;j<w.length ;j++){ %>
  Surgery Name: <%= w[j].sname %> <br>
   Surgery Doctor:<%= w[j].doc_id %> <br>
   Surgery Date: <%= w[j].date_s %> <br>
  <%  } %>
  <% } %>
</div>


<div id="Med" class="tabcontent">
 
<h2> Search for Medicines</h2>
<div id="3">
<form method="POST" autocomplete="off" action="/med_insert">
  <div class="autocomplete" style="width:300px;">
  Medicine name:<br> 
    <input id="myInput" type="text" size="30" name="name1" placeholder="Search"><br>
  </div><br>
  Quantity:<br>
  <input id="myInput" type="text" size="30" name="name2" placeholder="Quantity"><br>
  Dosage:<br>
  <input id="myInput" type="text" size="30" name="name3" placeholder="Dosage"><br>
  <input type="hidden" name="eventname" value=<%= z %> >
  <% console.log("the value of event.name hidden field",  z ) %>
  <input type="submit">
</form>
</div>
<script>
function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
  });
}

/*An array containing all the country names in the world:*/
var medicines = ["25% Dextrose",
"Amino salicylic Acid",
"Allopurinol",
"Amoxicillin",
"Atorvastatin",
"Atorvastatin",
"Atorvastatin",
"Betamethasone",
"Carboplatin",
"Cefixime",
"Cetrizine",
"Chlorambucil",
"Clindamycin",
"Clopidogrel",
"Dacarbazine",
"Daunorubicin",
"Diazepam",
"EMLA cream",
"Enoxaparin",
"Famotidine",
"Fentanyl",
"Filgrastim",
"Hydroxychloroquine",
"Ifosfamide",
"Imatinib",
"Ipratropium bromide",
"Leflunomide",
"Lorazepam",
"Mefloquine",
"Mesna",
"Misoprostol",
"N-acetylcysteine",
"Olanzapine",
"Oxaliplatin",
"Pantoprazole",
"Permethrin",
"Piperazine",
"Premix Insulin 30:70",
"Propofol",
"Sevoflurane",
"Stavudine",
"Lamivudine",
"Tramadol",
"Vecuronium",
"Zidovudine",
"Lamivudine",
"Nevirapine"];


/*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
autocomplete(document.getElementById("myInput"), medicines);

</script>

</div>






<div id="Dia" class="tabcontent"> 
  <br><br>
  <form method="post" action="/diag">
  <h4>Problem:</h4>
  <input type="text" name="prob" size="50">
  <h4>Surgery</h4>
  
  <div>
    <div>
      <input type="radio" name="suryes" id="choice-animals-dogs" value="suryes" required>
      <label for="choice-animals-dogs">Yes</label>
    
      <div class="reveal-if-active">
 		Surgery Name:<br>
        <input type="text" id="which-dog" name="sur" class="require-if-active" data-require-pair="#choice-animals-dogs"><br>
        Syrgery Date:<br>
        <input type="date" id="which-dog" name="surdate" class="require-if-active" data-require-pair="#choice-animals-dogs" min="2018-11-15"><br>
      </div>
    </div>
    
    <div>
     <input type="radio" name="suryes" id="choice-animals-cats" value="surno">
      <label for="choice-animals-cats">No</label>
    
      <div class="reveal-if-active">
        <label for="which-cat">Ok!</label>
      </div>
      </div>
    </div>
  
   <h4>Lab</h4>
  <div>
    <div>
      <input type="radio" name="labyes" id="hatt" value="labyes" required>
      <label for="hatt">Yes</label>
    
      <div class="reveal-if-active">
 		Lab Name:
        <input type="text" id="which-dog" name="lab" class="require-if-active" data-require-pair="#hatt">
      </div>
    </div>
    <div>
      <input type="radio" name="labyes" id="choice-animals-cats" value="labno">
      <label for="choice-animals-cats">No</label>
    
      <div class="reveal-if-active">
        <label for="which-cat">Ok!</label>
       
      </div>
    </div>

  </div>
  <br>
  <input type="hidden" name="eventname" value=<%= z %> >
  <% console.log("the value of event.name hidden field",  z ) %>
  <input type="submit" name="submit">    
</form>

</div>

  <br>
  

  <br>
</div>
<div class="clearfix"></div>



<script>
 
    
function openCity(evt, cityName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(cityName).style.display = "block";
    evt.currentTarget.className += " active";
}
</script>
 <p id="demo"></p>    
</body>
</html> 
